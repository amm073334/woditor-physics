const int SCREEN_WIDTH = 1280;
const int SCREEN_HEIGHT = 720;

const int SCREEN_CENTER_X = SCREEN_WIDTH / 2;
const int SCREEN_CENTER_Y = SCREEN_HEIGHT / 2;

const int H_FOV = 900;
const int TAN_HFOV_2 = 1000;
const int TAN_VFOV_2 = TAN_HFOV_2 * SCREEN_HEIGHT / SCREEN_WIDTH;

const int MAX_QUADS = 100;

cdb Properties {
    int indexbuf_len;
    int[12] look_at;
}

cdb VertexBuffer {
    int[3] world_space;
    int[3] camera_space;
    int screen_x;
    int screen_y;
}

cdb IndexBuffer {
    int z;
    int ul;
    int ur;
    int dl;
    int dr;
}

cdb Cubes {
    int[3] v0;
    int[3] v1;
    int[3] v2;
    int[3] v3;
    int[3] v4;
    int[3] v5;
    int[3] v6;
    int[3] v7;
    int[3] v8;
}

inline void render_buffer_vert(int i, int[3] v) {
    vec3_copy(VertexBuffer[i].world_space, v);
    mat3x4_transform(VertexBuffer[i].camera_space, Properties[0].look_at, v);

    if (VertexBuffer[i].camera_space[2] <= 0) {
        return;
    }

    VertexBuffer[i].screen_x = 
        VertexBuffer[i].camera_space[0] * SCREEN_CENTER_X / 
        (VertexBuffer[i].camera_space[2] * TAN_HFOV_2 / 1000) + SCREEN_CENTER_X;
    VertexBuffer[i].screen_y = 
        -VertexBuffer[i].camera_space[1] * SCREEN_CENTER_Y / 
        (VertexBuffer[i].camera_space[2] * TAN_VFOV_2 / 1000) + SCREEN_CENTER_Y;
}

inline void render_draw() {
    cmd [150](16777218,0,0,0,0,MAX_QUADS)();

    int i = 0;
    loop (Properties[0].indexbuf_len) {
        int avg_z = VertexBuffer[IndexBuffer[i].ul].camera_space[2]
                    + VertexBuffer[IndexBuffer[i].ur].camera_space[2]
                    + VertexBuffer[IndexBuffer[i].dl].camera_space[2]
                    + VertexBuffer[IndexBuffer[i].dr].camera_space[2];

        IndexBuffer[i].z = avg_z / 4;
        i += 1;
    }

    cdb_sort_desc(2, Properties[0].indexbuf_len, 0);

    i = 0;
    loop (Properties[0].indexbuf_len) {
        int ul = IndexBuffer[i].ul;
        int ur = IndexBuffer[i].ur;
        int dl = IndexBuffer[i].dl;
        int dr = IndexBuffer[i].dr;
        
        if (VertexBuffer[ul].camera_space[2] <= 0 ||
            VertexBuffer[ur].camera_space[2] <= 0 ||
            VertexBuffer[dl].camera_space[2] <= 0 ||
            VertexBuffer[dr].camera_space[2] <= 0)
        {
            i += 1;
            continue;
        }

        int ul_x = VertexBuffer[ul].screen_x;
        int ul_y = VertexBuffer[ul].screen_y;
        int ur_x = VertexBuffer[ur].screen_x;
        int ur_y = VertexBuffer[ur].screen_y;
        int dl_x = VertexBuffer[dl].screen_x;
        int dl_y = VertexBuffer[dl].screen_y;
        int dr_x = VertexBuffer[dr].screen_x;
        int dr_y = VertexBuffer[dr].screen_y;

        cmd [150]
            (67112960,
            i,0,1,1,1,255,
            ul_x,ul_y,
            100,0,0,33554432,0,0,100,100,100,0,
            ur_x,ur_y,dl_x,dl_y,dr_x,dr_y)
            ("thing.png");
        // cmd [150]
        //     (67112960,
        //     i,0,1,6,i+1,255,
        //     ul_x,ul_y,
        //     100,0,0,33554432,0,0,100,100,100,0,
        //     ur_x,ur_y,dl_x,dl_y,dr_x,dr_y)
        //     ("numbered.png");

        i += 1;
    }
}

inline void render_init_cube(int cube, int half_side_len) {
    Properties[0].indexbuf_len += 6;

    IndexBuffer[cube*6 + 0].ul = cube*8 + 0;
    IndexBuffer[cube*6 + 0].ur = cube*8 + 1;
    IndexBuffer[cube*6 + 0].dl = cube*8 + 2;
    IndexBuffer[cube*6 + 0].dr = cube*8 + 3;
    
    IndexBuffer[cube*6 + 1].ul = cube*8 + 6;
    IndexBuffer[cube*6 + 1].ur = cube*8 + 7;
    IndexBuffer[cube*6 + 1].dl = cube*8 + 4;
    IndexBuffer[cube*6 + 1].dr = cube*8 + 5;
    
    IndexBuffer[cube*6 + 2].ul = cube*8 + 1;
    IndexBuffer[cube*6 + 2].ur = cube*8 + 0;
    IndexBuffer[cube*6 + 2].dl = cube*8 + 5;
    IndexBuffer[cube*6 + 2].dr = cube*8 + 4;
    
    IndexBuffer[cube*6 + 3].ul = cube*8 + 2;
    IndexBuffer[cube*6 + 3].ur = cube*8 + 3;
    IndexBuffer[cube*6 + 3].dl = cube*8 + 6;
    IndexBuffer[cube*6 + 3].dr = cube*8 + 7;
    
    IndexBuffer[cube*6 + 4].ul = cube*8 + 0;
    IndexBuffer[cube*6 + 4].ur = cube*8 + 2;
    IndexBuffer[cube*6 + 4].dl = cube*8 + 4;
    IndexBuffer[cube*6 + 4].dr = cube*8 + 6;
    
    IndexBuffer[cube*6 + 5].ul = cube*8 + 3;
    IndexBuffer[cube*6 + 5].ur = cube*8 + 1;
    IndexBuffer[cube*6 + 5].dl = cube*8 + 7;
    IndexBuffer[cube*6 + 5].dr = cube*8 + 5;
    // top:
    // 0 1
    // 2 3
    // bottom:
    // 4 5
    // 6 7
    Cubes[cube].v0[0] = -half_side_len;
    Cubes[cube].v0[1] =  half_side_len;
    Cubes[cube].v0[2] =  half_side_len;

    Cubes[cube].v1[0] =  half_side_len;
    Cubes[cube].v1[1] =  half_side_len;
    Cubes[cube].v1[2] =  half_side_len;
    
    Cubes[cube].v2[0] = -half_side_len;
    Cubes[cube].v2[1] =  half_side_len;
    Cubes[cube].v2[2] = -half_side_len;
    
    Cubes[cube].v3[0] =  half_side_len;
    Cubes[cube].v3[1] =  half_side_len;
    Cubes[cube].v3[2] = -half_side_len;
    
    Cubes[cube].v4[0] = -half_side_len;
    Cubes[cube].v4[1] = -half_side_len;
    Cubes[cube].v4[2] =  half_side_len;
    
    Cubes[cube].v5[0] =  half_side_len;
    Cubes[cube].v5[1] = -half_side_len;
    Cubes[cube].v5[2] =  half_side_len;
    
    Cubes[cube].v6[0] = -half_side_len;
    Cubes[cube].v6[1] = -half_side_len;
    Cubes[cube].v6[2] = -half_side_len;
    
    Cubes[cube].v7[0] =  half_side_len;
    Cubes[cube].v7[1] = -half_side_len;
    Cubes[cube].v7[2] = -half_side_len;
}

inline void render_buffer_cube(int cube, int[12] transform) {
    int[3] buf;
    
    mat3x4_transform(buf, transform, Cubes[cube].v0);
    render_buffer_vert(cube*8 + 0, buf);
    mat3x4_transform(buf, transform, Cubes[cube].v1);
    render_buffer_vert(cube*8 + 1, buf);
    mat3x4_transform(buf, transform, Cubes[cube].v2);
    render_buffer_vert(cube*8 + 2, buf);
    mat3x4_transform(buf, transform, Cubes[cube].v3);
    render_buffer_vert(cube*8 + 3, buf);
    mat3x4_transform(buf, transform, Cubes[cube].v4);
    render_buffer_vert(cube*8 + 4, buf);
    mat3x4_transform(buf, transform, Cubes[cube].v5);
    render_buffer_vert(cube*8 + 5, buf);
    mat3x4_transform(buf, transform, Cubes[cube].v6);
    render_buffer_vert(cube*8 + 6, buf);
    mat3x4_transform(buf, transform, Cubes[cube].v7);
    render_buffer_vert(cube*8 + 7, buf);
}

inline int render_intersect_quad(int[3] r, int quad, int[3] origin, int[3] dir) {
    int[3] n;
    int[3] a;
    int[3] b;

    int[3] ul_pos;
    vec3_copy(ul_pos, VertexBuffer[IndexBuffer[quad].ul].world_space);
    vec3_sub(a, VertexBuffer[IndexBuffer[quad].ur].world_space, ul_pos);
    vec3_sub(b, VertexBuffer[IndexBuffer[quad].dl].world_space, ul_pos);
    
    vec3_cross(n, a, b);
    vec3_normalize(n);

    int denom = -vec3_dot(n, dir);
    if (denom == 0) {
        return 0;
    }

    int t;
    {
        int[3] tmp;
        vec3_sub(tmp, origin, ul_pos);
        t = vec3_dot(tmp, n) * 1000 / denom;
    }

    vec3_copy(r, origin);
    vec3_add_scaled(r, dir, t);

    int[3] from_ul;
    vec3_sub(from_ul, r, ul_pos);
    
    int u = vec3_dot(from_ul, a);
    int v = vec3_dot(from_ul, b);

    if (u >= 0 && u < vec3_dot(a, a) &&
        v >= 0 && v < vec3_dot(b, b))
    {
        return t;
    }
    return 0;
}

inline int test_draw_line(int pic, int[3] a, int[3] b) {
    int[3] start;
    int[3] end;
    vec3_copy(start, a);
    vec3_copy(end, b);
    render_buffer_vert(8, start);
    render_buffer_vert(9, end);
    int len_x = VertexBuffer[9].screen_x - VertexBuffer[8].screen_x;
    int len_y = VertexBuffer[9].screen_y - VertexBuffer[8].screen_y;
    cmd [150](48,pic,0,len_x,len_y,1,255,VertexBuffer[8].screen_x,VertexBuffer[8].screen_y,100,0,0,33554432,0,0,200,30,30)("<LINE-11>");
}