inline int sin(int x) {
    int out;
    cmd [121](out, x, 0, 0xA00)();
    return out;
}

inline int cos(int x) {
    int out;
    cmd [121](out, x, 0, 0xB00)();
    return out;
}

inline int sqrt(int x) {
    int out;
    cmd [121](out, x, 0, 0xC00)();
    return out;
}

inline int muldiv(int n, int a, int b) {
    int out = n;
    cmd [121](out, a, b, 0x3302)();
    return out;
}

inline int vec3_dot(int[3] a, int[3] b) {
    return (a[0] * b[0] + a[1] * b[1] + a[2] * b[2]) / 1000;
}

inline void vec3_add_scaled(int[3] a, int[3] b, int scale) {
    a[0] += b[0] * scale / 1000;
    a[1] += b[1] * scale / 1000;
    a[2] += b[2] * scale / 1000;
}

inline void vec3_add(int[3] r, int[3] a, int[3] b) {
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
}

inline void vec3_sub(int[3] r, int[3] a, int[3] b) {
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
}

inline void vec3_scale(int[3] r, int[3] a, int b) {
    r[0] = a[0] * b / 1000;
    r[1] = a[1] * b / 1000;
    r[2] = a[2] * b / 1000;
}

inline void vec3_mul(int[3] r, int[3] a, int[3] b) {
    r[0] = (a[0] * b[0]) / 1000;
    r[1] = (a[1] * b[1]) / 1000;
    r[2] = (a[2] * b[2]) / 1000;
}

// TODO: change to left-handed?
inline void vec3_cross(int[3] r, int[3] b, int[3] a) {
    r[0] = (a[1]*b[2] - a[2]*b[1]) / 1000;
    r[1] = (a[2]*b[0] - a[0]*b[2]) / 1000;
    r[2] = (a[0]*b[1] - a[1]*b[0]) / 1000;
}

inline int vec3_mag(int[3] v) {
    return sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]) / 1000;
}

inline int vec3_sqmag(int[3] v) {
    return (v[0]*v[0] + v[1]*v[1] + v[2]*v[2]) / 1000;
}

inline void vec3_normalize(int[3] v) {
    int l = vec3_mag(v);
    v[0] = v[0] * 1000 / l;
    v[1] = v[1] * 1000 / l;
    v[2] = v[2] * 1000 / l;
}

inline void quat_normalize(int[4] q) {
    int d = q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3];
    if (d == 0) {
        q[0] = 1000;
        return;
    }
    d = sqrt(d) / 1000;
    q[0] = q[0] * 1000 / d;
    q[1] = q[1] * 1000 / d;
    q[2] = q[2] * 1000 / d;
    q[3] = q[3] * 1000 / d;
}

inline void quat_mul(int[4] a, int[4] b) {
    int[4] r;
    r[0] = a[0]*b[0] - a[1]*b[1] - a[2]*b[2] - a[3]*b[3];
    r[1] = a[0]*b[1] + a[1]*b[0] + a[2]*b[3] - a[3]*b[2];
    r[2] = a[0]*b[2] + a[2]*b[0] + a[3]*b[1] - a[1]*b[3];
    r[3] = a[0]*b[3] + a[3]*b[0] + a[1]*b[2] - a[2]*b[1];
    a[0] = r[0] / 1000;
    a[1] = r[1] / 1000;
    a[2] = r[2] / 1000;
    a[3] = r[3] / 1000;
}

inline void quat_rot(int[4] a, int[3] b) {
    int[4] q;
    q[0] = 0;
    q[1] = b[0];
    q[2] = b[1];
    q[3] = b[2];
    quat_mul(a, q);
}

inline void quat_add_scaled(int[4] q, int[3] v, int scale) {
    int[4] q2;
    q2[0] = 0;
    q2[1] = v[0] * scale / 1000;
    q2[2] = v[1] * scale / 1000;
    q2[3] = v[2] * scale / 1000;
    quat_mul(q2, q);
    q[0] += q2[0] / 2;
    q[1] += q2[1] / 2;
    q[2] += q2[2] / 2;
    q[3] += q2[3] / 2;
}

inline void mat3x3_transform(int[3] r, int[9] m, int[3] v) {
    r[0] = (v[0]*m[0] + v[1]*m[1] + v[2]*m[2]) / 1000;
    r[1] = (v[0]*m[3] + v[1]*m[4] + v[2]*m[5]) / 1000;
    r[2] = (v[0]*m[6] + v[1]*m[7] + v[2]*m[8]) / 1000;
}

inline void mat3x3_mul_mat3x3(int[9] r, int[9] a, int[9] b) {
    r[0] = (a[0]*b[0] + a[1]*b[3] + a[2]*b[6]) / 1000;
    r[1] = (a[0]*b[1] + a[1]*b[4] + a[2]*b[7]) / 1000;
    r[2] = (a[0]*b[2] + a[1]*b[5] + a[2]*b[8]) / 1000;

    r[3] = (a[3]*b[0] + a[4]*b[3] + a[5]*b[6]) / 1000;
    r[4] = (a[3]*b[1] + a[4]*b[4] + a[5]*b[7]) / 1000;
    r[5] = (a[3]*b[2] + a[4]*b[5] + a[5]*b[8]) / 1000;

    r[6] = (a[6]*b[0] + a[7]*b[3] + a[8]*b[6]) / 1000;
    r[7] = (a[6]*b[1] + a[7]*b[4] + a[8]*b[7]) / 1000;
    r[8] = (a[6]*b[2] + a[7]*b[5] + a[8]*b[8]) / 1000;
}

inline void mat3x3_invert(int[9] r, int[9] m) {
    int t4  = m[0]*m[4];
    int t6  = m[0]*m[5];
    int t8  = m[1]*m[3];
    int t10 = m[2]*m[3];
    int t12 = m[1]*m[6];
    int t14 = m[2]*m[6];

    int det = muldiv(t4, m[8], 1000) - muldiv(t6, m[7], 1000) - muldiv(t8, m[8], 1000) +
              muldiv(t10, m[7], 1000) + muldiv(t12, m[5], 1000) - muldiv(t14, m[4], 1000);

    if (det == 0) {
        print("3x3 uninvertible");
        return;
    }

    r[0] = muldiv( (m[4]*m[8]        - m[5]*m[7]), 1000, det);
    r[1] = muldiv(-(m[1]*m[8]        - m[2]*m[7]), 1000, det);
    r[2] = muldiv( (m[1]*m[5]        - m[2]*m[4]), 1000, det);
    r[3] = muldiv(-(m[3]*m[8]        - m[5]*m[6]), 1000, det);
    r[4] = muldiv( (m[0]*m[8]        - t14      ), 1000, det);
    r[5] = muldiv(-(t6               - t10      ), 1000, det);
    r[6] = muldiv( (m[3]*m[7]        - m[4]*m[6]), 1000, det);
    r[7] = muldiv(-(m[0]*m[7]        - t12      ), 1000, det);
    r[8] = muldiv( (t4               - t8       ), 1000, det);
}

// faster version with more inaccuracy
inline void mat3x3_invert_fast(int[9] r, int[9] m) {
    int t4  = m[0]*m[4] / 1000;
    int t6  = m[0]*m[5] / 1000;
    int t8  = m[1]*m[3] / 1000;
    int t10 = m[2]*m[3] / 1000;
    int t12 = m[1]*m[6] / 1000;
    int t14 = m[2]*m[6] / 1000;

    int det = t4*m[8] - t6*m[7] - t8*m[8] +
              t10*m[7] + t12*m[5] - t14*m[4];

    if (det == 0) {
        print("3x3 uninvertible");
        return;
    }
    det /= 1000;
    int idet = 1000000 / det;

    r[0] =  (m[4]*m[8]        - m[5]*m[7]) / 1000 * idet / 1000;
    r[1] = -(m[1]*m[8]        - m[2]*m[7]) / 1000 * idet / 1000;
    r[2] =  (m[1]*m[5]        - m[2]*m[4]) / 1000 * idet / 1000;
    r[3] = -(m[3]*m[8]        - m[5]*m[6]) / 1000 * idet / 1000;
    r[4] =  (m[0]*m[8] / 1000 - t14      )        * idet / 1000;
    r[5] = -(t6               - t10      )        * idet / 1000;
    r[6] =  (m[3]*m[7]        - m[4]*m[6]) / 1000 * idet / 1000;
    r[7] = -(m[0]*m[7] / 1000 - t12      )        * idet / 1000;
    r[8] =  (t4               - t8       )        * idet / 1000;
}

inline void mat3x3_transpose(int[9] r, int[9] m) {
    r[0] = m[0];
    r[1] = m[3];
    r[2] = m[6];
    r[3] = m[1];
    r[4] = m[4];
    r[5] = m[7];
    r[6] = m[2];
    r[7] = m[5];
    r[8] = m[8];
}

inline void mat3x3_orient(int[9] m, int[4] q) {
    m[0] = 1000 - (2*q[2]*q[2] + 2*q[3]*q[3]) / 1000;
    m[1] =        (2*q[1]*q[2] + 2*q[3]*q[0]) / 1000;
    m[2] =        (2*q[1]*q[3] - 2*q[2]*q[0]) / 1000;
    m[3] =        (2*q[1]*q[2] - 2*q[3]*q[0]) / 1000;
    m[4] = 1000 - (2*q[1]*q[1] + 2*q[3]*q[3]) / 1000;
    m[5] =        (2*q[2]*q[3] + 2*q[1]*q[0]) / 1000;
    m[6] =        (2*q[1]*q[3] + 2*q[2]*q[0]) / 1000;
    m[7] =        (2*q[2]*q[3] - 2*q[1]*q[0]) / 1000;
    m[8] = 1000 - (2*q[1]*q[1] + 2*q[2]*q[2]) / 1000;
}

// the "Matrix4" class from cyclone
inline void mat3x4_transform(int[3] r, int[12] m, int[3] v) {
    r[0] = (v[0]*m[0] + v[1]*m[1] + v[2]*m[2] ) / 1000 + m[3];
    r[1] = (v[0]*m[4] + v[1]*m[5] + v[2]*m[6] ) / 1000 + m[7];
    r[2] = (v[0]*m[8] + v[1]*m[9] + v[2]*m[10]) / 1000 + m[11];
}

inline void mat3x4_mul_mat3x4(int[12] r, int[12] a, int[12] b) {
    r[0]  = (b[0]*a[0] + b[4]*a[1] + b[8]*a[2]  ) / 1000;
    r[4]  = (b[0]*a[4] + b[4]*a[5] + b[8]*a[6]  ) / 1000;
    r[8]  = (b[0]*a[8] + b[4]*a[9] + b[8]*a[10] ) / 1000;

    r[1]  = (b[1]*a[0] + b[5]*a[1] + b[9]*a[2]  ) / 1000;
    r[5]  = (b[1]*a[4] + b[5]*a[5] + b[9]*a[6]  ) / 1000;
    r[9]  = (b[1]*a[8] + b[5]*a[9] + b[9]*a[10] ) / 1000;

    r[2]  = (b[2]*a[0] + b[6]*a[1] + b[10]*a[2] ) / 1000;
    r[6]  = (b[2]*a[4] + b[6]*a[5] + b[10]*a[6] ) / 1000;
    r[10] = (b[2]*a[8] + b[6]*a[9] + b[10]*a[10]) / 1000;

    r[3]  = (b[3]*a[0] + b[7]*a[1] + b[11]*a[2] ) / 1000 + a[3];
    r[7]  = (b[3]*a[4] + b[7]*a[5] + b[11]*a[6] ) / 1000 + a[7];
    r[11] = (b[3]*a[8] + b[7]*a[9] + b[11]*a[10]) / 1000 + a[11];
}

inline void mat3x4_invert(int[12] r, int[12] m) {
    int det = -m[8]*m[5] / 1000 * m[2] +
               m[4]*m[9] / 1000 * m[2] +
               m[8]*m[1] / 1000 * m[6] -
               m[0]*m[9] / 1000 * m[6] -
               m[4]*m[1] / 1000 * m[10]+
               m[0]*m[5] / 1000 * m[10];
    if (det == 0) {
        print("3x4 uninvertible");
        return;
    }
    det /= 1000;
    int idet = 1000000 / det;

    r[0]  = (-m[9]*m[6] + m[5]*m[10]) * idet / 1000;
    r[4]  = ( m[8]*m[6] - m[4]*m[10]) * idet / 1000;
    r[8]  = (-m[8]*m[5] + m[4]*m[9] ) * idet / 1000;

    r[1]  = ( m[9]*m[2] - m[1]*m[10]) * idet / 1000;
    r[5]  = (-m[8]*m[2] + m[0]*m[10]) * idet / 1000;
    r[9]  = ( m[8]*m[1] - m[0]*m[9] ) * idet / 1000;

    r[2]  = (-m[5]*m[2] + m[1]*m[6] ) * idet / 1000;
    r[6]  = ( m[4]*m[2] - m[0]*m[6] ) * idet / 1000;
    r[10] = (-m[4]*m[1] + m[0]*m[5] ) * idet / 1000;

    r[3]  = ( m[9] * m[6]  / 1000 * m[3]
             -m[5] * m[10] / 1000 * m[3]
             -m[9] * m[2]  / 1000 * m[7]
             +m[1] * m[10] / 1000 * m[7]
             +m[5] * m[2]  / 1000 * m[11]
             -m[1] * m[6]  / 1000 * m[11]) / 1000 * idet;
    r[7]  = (-m[8] * m[6]  / 1000 * m[3]
             +m[4] * m[10] / 1000 * m[3]
             +m[8] * m[2]  / 1000 * m[7]
             -m[0] * m[10] / 1000 * m[7]
             -m[4] * m[2]  / 1000 * m[11]
             +m[0] * m[6]  / 1000 * m[11]) / 1000 * idet;
    r[11] = ( m[8] * m[5]  / 1000 * m[3]
             -m[4] * m[9]  / 1000 * m[3]
             -m[8] * m[1]  / 1000 * m[7]
             +m[0] * m[9]  / 1000 * m[7]
             +m[4] * m[1]  / 1000 * m[11]
             -m[0] * m[5]  / 1000 * m[11]) / 1000 * idet;
}

inline void mat3x4_orient_pos(int[12] m, int[4] q, int[3] pos) {
    m[0]  = 1000 - (2*q[2]*q[2] + 2*q[3]*q[3]) / 1000;
    m[1]  =        (2*q[1]*q[2] + 2*q[3]*q[0]) / 1000;
    m[2]  =        (2*q[1]*q[3] - 2*q[2]*q[0]) / 1000;
    m[3]  = pos[0];

    m[4]  =        (2*q[1]*q[2] - 2*q[3]*q[0]) / 1000;
    m[5]  = 1000 - (2*q[1]*q[1] + 2*q[3]*q[3]) / 1000;
    m[6]  =        (2*q[2]*q[3] + 2*q[1]*q[0]) / 1000;
    m[7]  = pos[1];

    m[8]  =        (2*q[1]*q[3] + 2*q[2]*q[0]) / 1000;
    m[9]  =        (2*q[2]*q[3] - 2*q[1]*q[0]) / 1000;
    m[10] = 1000 - (2*q[1]*q[1] + 2*q[2]*q[2]) / 1000;
    m[11] = pos[2];
}

inline void mat3x4_transform_inverse(int[3] r, int[12] m, int[3] v) {
    int[3] tmp;
    tmp[0] = v[0] - m[3];
    tmp[1] = v[1] - m[7];
    tmp[2] = v[2] - m[11];

    r[0] = tmp[0]*m[0] + tmp[1]*m[4] + tmp[2]*m[8];
    r[1] = tmp[0]*m[1] + tmp[1]*m[5] + tmp[2]*m[9];
    r[2] = tmp[0]*m[2] + tmp[1]*m[6] + tmp[2]*m[10];
}

inline void mat3x4_transform_direction(int[3] r, int[12] m, int[3] v) {
    r[0] = v[0]*m[0] + v[1]*m[1] * v[2]*m[2]; 
    r[1] = v[0]*m[4] + v[1]*m[5] * v[2]*m[6]; 
    r[2] = v[0]*m[8] + v[1]*m[9] * v[2]*m[10]; 
}

inline void mat3x4_transform_inverse_direction(int[3] r, int[12] m, int[3] v) {
    r[0] = v[0]*m[0] + v[1]*m[4] * v[2]*m[8]; 
    r[1] = v[0]*m[1] + v[1]*m[5] * v[2]*m[9]; 
    r[2] = v[0]*m[2] + v[1]*m[6] * v[2]*m[10]; 
}