import "util";
import "math";
import "render";
import "rb";
import "contact";
import "collide";
import "spring";

inline void print_3x4(int[12] m) {
    print(f"{m[0]} {m[1]} {m[2]} {m[3]}");
    print(f"{m[4]} {m[5]} {m[6]} {m[7]}");
    print(f"{m[8]} {m[9]} {m[10]} {m[11]}");
}

inline void print_3x3(int[9] m) {
    print(f"{m[0]} {m[1]} {m[2]}");
    print(f"{m[3]} {m[4]} {m[5]}");
    print(f"{m[6]} {m[7]} {m[8]}");
}

inline void print_rb_transform(int rb) {
    print("");
    print(f"{RigidBodies[rb].transform[0]} {RigidBodies[rb].transform[1]} {RigidBodies[rb].transform[2]} {RigidBodies[rb].transform[3]}");        
    print(f"{RigidBodies[rb].transform[4]} {RigidBodies[rb].transform[5]} {RigidBodies[rb].transform[6]} {RigidBodies[rb].transform[7]}");        
    print(f"{RigidBodies[rb].transform[8]} {RigidBodies[rb].transform[9]} {RigidBodies[rb].transform[10]} {RigidBodies[rb].transform[11]}");        
    print("");
}

inline void print_vec3(int[3] v) {
    print(f"{v[0]} {v[1]} {v[2]}");
}

void main() {
    int n_rb = 4;

    // hide cursor
    cmd [121](9000074,0,0,0)();
    const int MOVE_SPEED = 300;
    const int SENS = 1500;
    const int CURSOR_PICT = 999999;

    render_init_cube(0, 1000);
    rb_init_cube(0, 1000, 2000);
    RigidBodies[0].position[0] = 10800;
    RigidBodies[0].position[1] = 7000;
    RigidBodies[0].position[2] = 0;
    RigidBodies[0].acceleration[1] = -9810;
    rb_calculate_derived(0);

    render_init_cube(1, 500);
    rb_init_cube(1, 1000, 1000);
    RigidBodies[1].position[0] = 10000;
    RigidBodies[1].position[1] = 15000;
    RigidBodies[1].position[2] = -550;
    RigidBodies[1].acceleration[1] = -9810;
    rb_calculate_derived(1);

    render_init_cube(3, 500);
    rb_init_cube(3, 1000, 1000);
    RigidBodies[3].position[0] = 9400;
    RigidBodies[3].position[1] = 15000;
    RigidBodies[3].position[2] = 550;
    RigidBodies[3].acceleration[1] = -9810;
    rb_calculate_derived(3);

    // springy block
    Springs[0].connection_point[1] = 1000;
    Springs[0].other_connection_point[0] = -10000;
    Springs[0].other_connection_point[1] = 10000;
    Springs[0].other_connection_point[2] = 0;
    Springs[0].rb_other = -1;
    Springs[0].spring_constant = 10000;
    Springs[0].rest_length = 2000;

    render_init_cube(2, 1000);
    rb_init_cube(2, 1000, 2000);
    RigidBodies[2].position[0] = -10000;
    RigidBodies[2].position[1] = 8000;
    RigidBodies[2].position[2] = 0;
    RigidBodies[2].acceleration[1] = -15100;
    rb_calculate_derived(2);

    // globals
    ContactGlobals[0].restitution = 200;
    ContactGlobals[0].friction = 400;

    int cam_yaw = 900;
    int cam_pitch = 0;
    int[3] cam_pos;
    cam_pos[0] = 0;
    cam_pos[1] = 0;
    cam_pos[2] = 0;
    loop {
        // graphics
        cmd [150](4096,CURSOR_PICT,0,1,1,1,255,SCREEN_CENTER_X,SCREEN_CENTER_Y,100,0)("dot.png");
        // set mouse to point to screen center
        cmd [121](9000071,SCREEN_CENTER_X,0,0)();
        cmd [121](9000072,SCREEN_CENTER_Y,0,0)();

        // get mouse movement since last frame
        {
            int mouse_x_mov;
            int mouse_y_mov;
            cmd [124](mouse_x_mov,12288,11)();
            cmd [124](mouse_y_mov,12288,12)();
            
            cam_yaw -= mouse_x_mov * SENS / 1000;
            cam_pitch -= mouse_y_mov * SENS / 1000;
        }
        if (cam_pitch > 870) cam_pitch = 870;
        if (cam_pitch < -870) cam_pitch = -870;

        int[3] forward;
        forward[0] = cos(cam_yaw) * cos(cam_pitch) / 1000;
        forward[1] = sin(cam_pitch);
        forward[2] = sin(cam_yaw) * cos(cam_pitch) / 1000;
        vec3_normalize(forward);
        
        int[3] right;
        {
            int[3] t_up;
            t_up[0] = 0;
            t_up[1] = 1000;
            t_up[2] = 0;
            vec3_cross(right, t_up, forward);
            vec3_normalize(right);
        }

        int[3] up;
        vec3_cross(up, forward, right);

        Properties[0].look_at[0] = right[0];
        Properties[0].look_at[1] = right[1];
        Properties[0].look_at[2] = right[2];
        Properties[0].look_at[3] = -vec3_dot(right, cam_pos);
        Properties[0].look_at[4] = up[0];
        Properties[0].look_at[5] = up[1];
        Properties[0].look_at[6] = up[2];
        Properties[0].look_at[7] = -vec3_dot(up, cam_pos);
        Properties[0].look_at[8] = forward[0];
        Properties[0].look_at[9] = forward[1];
        Properties[0].look_at[10] = forward[2];
        Properties[0].look_at[11] = -vec3_dot(forward, cam_pos);

        vec3_copy(Properties[0].cam_pos, cam_pos);

        if (key(117)) { // W
            vec3_add_scaled(cam_pos, forward, MOVE_SPEED);
        }
        if (key(131)){ // S
            vec3_add_scaled(cam_pos, forward, -MOVE_SPEED);
        }
        if (key(130)) { // A
            vec3_add_scaled(cam_pos, right, -MOVE_SPEED);
        }
        if (key(132)) { // D
            vec3_add_scaled(cam_pos, right, MOVE_SPEED);
        }

        {
            int[3] world_up;
            world_up[0] = 0;
            world_up[1] = 1000;
            world_up[2] = 0;
            if (key(116)) { // Q
                vec3_add_scaled(cam_pos, world_up, -MOVE_SPEED);
            }
            if (key(118)) { // E
                vec3_add_scaled(cam_pos, world_up, MOVE_SPEED);
            }
        }
        cam_pos[1] = 2000;
        
        // draw floor/sky
        {
            const int FLOOR_PICT = -1;
            const int SKY_PICT = -2;

            int[3] far_away;
            far_away[0] = forward[0] * 1000;
            far_away[1] = 0;
            far_away[2] = forward[2] * 1000;

            int[3] far_away_cam_space;
            mat3x4_transform(far_away_cam_space, Properties[0].look_at, far_away);
            int far_away_y = -far_away_cam_space[1] * SCREEN_CENTER_Y / (far_away_cam_space[2] * TAN_VFOV_2 / 1000) + SCREEN_CENTER_Y;
            cmd [150](48,SKY_PICT,0,SCREEN_WIDTH,SCREEN_HEIGHT,1,255,0,0,100,0,0,33554432,0,0,70,90,100)("<SQUARE>");
            cmd [150](48,FLOOR_PICT,0,SCREEN_WIDTH,SCREEN_HEIGHT * 100,1,255,0,far_away_y,100,0,0,33554432,0,0,40,40,40)("<SQUARE>");
        }

        buffer_cubes(n_rb);
        {
            int[3] spring_conn_world;
            mat3x4_transform(spring_conn_world, RigidBodies[2].transform, Springs[0].connection_point);
            render_buffer_line(Springs[0].other_connection_point, spring_conn_world);
        }

        // physics
        int test;
        cmd [123](test,135425,157)();
        if (1 || test || key(152)) {

            start_frame(n_rb);

            spring_update_force(0, 2, 16);
            {
                int min_t = 0;
                int[3] min_p;
                int quad;
                for (int i = 0; i < Properties[0].indexbuf_len; i += 1) {
                    int[3] p;
                    int t = render_intersect_quad(p, i, cam_pos, forward);
                    if (t > 0 && (min_t == 0 || t < min_t)) {
                        min_t = t;
                        vec3_copy(min_p, p);
                        quad = i;
                    }
                }
                
                if (min_t > 0) {
                    cmd [150](4263681,CURSOR_PICT,0,0,0,-1000000,-1000000,0,0,-1000000,-1000000,0,33554432,0,0,200,30,30)();
                    int click;
                    cmd [124](click,12288,7)();
                    if (click) {
                        cmd [150](4263681,CURSOR_PICT,0,0,0,-1000000,-1000000,0,0,-1000000,-1000000,0,33554432,0,0,30,30,200)();
                        int[3] force;
                        vec3_clear(force);
                        vec3_add_scaled(force, forward, 10000);

                        int apply_rb = quad / 6;
                        rb_add_force_at_pt(apply_rb, force, min_p);
                    }
                }
            }

            run_physics(n_rb);
        }
        
        render_draw();

        wait(1);
    }
}

inline void start_frame(int n_rb) {
    for (int i = 0; i < n_rb; i += 1) {
        rb_clear_accum(i);
        rb_calculate_derived(i);
    }
}

inline void buffer_cubes(int n_rb) {
    for (int i = 0; i < n_rb; i += 1) {
        render_buffer_cube(i, RigidBodies[i].transform);
    }
}

inline void run_physics(int n_rb) {
    for (int i = 0; i < n_rb; i += 1) {
        rb_integrate(i, 16);
    }
    ContactGlobals[0].n_contacts = 0;
    generate_contacts(n_rb);
    ct_resolve(16);
}

inline void generate_contacts(int n_rb) {
    int[3] plane_normal;
    plane_normal[0] = 0;
    plane_normal[1] = 1000;
    plane_normal[2] = 0;
    for (int i = 0; i < n_rb; i += 1) {
        collide_box_and_halfspace(i, plane_normal, 0);
        for (int j = i + 1; j < n_rb; j += 1) {
            collide_box_and_box(i, j);
        }
    }
}